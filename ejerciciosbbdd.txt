--1.Devuelve todas las películas

SELECT * FROM MOVIES


--2. Devuelve todos los géneros existentes

SELECT * FROM GENRES


--3. Devuelve la lista de todos los estudios de grabación que estén activos

SELECT * FROM STUDIOS WHERE STUDIO_ACTIVE IS TRUE


--4. Devuelve una lista de los 20 últimos miembros en anotarse al videoclub

SELECT * FROM MEMBERS ORDER BY MEMBER_DISCHARGE_DATE DESC LIMIT 20




DIFICULTAD: Fácil


--5. Devuelve las 20 duraciones de películas más frecuentes, ordenados de mayor a menor.

SELECT MOVIE_DURATION, COUNT(*) as frecuencia
FROM MOVIES
GROUP BY MOVIE_DURATION
ORDER BY frecuencia DESC
LIMIT 20;


--6. Devuelve las películas del año 2000 en adelante que empiecen por la letra A.

SELECT MOVIE_NAME, MOVIE_LAUNCH_DATE
FROM MOVIES
WHERE YEAR(MOVIE_LAUNCH_DATE) >= 2000
AND MOVIE_NAME LIKE 'A%';

--7. Devuelve los actores nacidos un mes de Junio

SELECT *
FROM ACTORS
WHERE MONTH(ACTOR_BIRTH_DATE) = 6;


--8. Devuelve los actores nacidos cualquier mes que no sea Junio y que sigan vivos.

SELECT *
FROM ACTORS
WHERE MONTH(ACTOR_BIRTH_DATE) <> 6
AND ACTOR_DEAD_DATE IS NULL;


--9. Devuelve el nombre y la edad de todos los directores menores o iguales de 50 años que estén vivos

SELECT DIRECTOR_NAME, 
       YEAR(CURRENT_DATE) - YEAR(DIRECTOR_BIRTH_DATE) - 
       CASE 
           WHEN MONTH(CURRENT_DATE) < MONTH(DIRECTOR_BIRTH_DATE)
           OR (MONTH(CURRENT_DATE) = MONTH(DIRECTOR_BIRTH_DATE) AND DAY(CURRENT_DATE) < DAY(DIRECTOR_BIRTH_DATE)) THEN 1
           ELSE 0
       END AS AGE
FROM DIRECTORS
WHERE YEAR(DIRECTOR_BIRTH_DATE) >= YEAR(CURRENT_DATE) - 50
AND DIRECTOR_DEAD_DATE IS NULL;


--10. Devuelve el nombre y la edad de todos los actores menores de 50 años que hayan fallecido

SELECT DIRECTOR_NAME,
       YEAR(DIRECTOR_DEAD_DATE) - YEAR(DIRECTOR_BIRTH_DATE) - 
       CASE 
           WHEN MONTH(DIRECTOR_DEAD_DATE) < MONTH(DIRECTOR_BIRTH_DATE)
           OR (MONTH(DIRECTOR_DEAD_DATE) = MONTH(DIRECTOR_BIRTH_DATE) AND DAY(DIRECTOR_DEAD_DATE) < DAY(DIRECTOR_BIRTH_DATE)) THEN 1
           ELSE 0
       END AS AGE
FROM DIRECTORS
WHERE YEAR(DIRECTOR_BIRTH_DATE) > YEAR(DIRECTOR_DEAD_DATE) - 50
AND DIRECTOR_DEAD_DATE IS NOT NULL;


--11. Devuelve el nombre de todos los directores menores o iguales de 40 años que estén vivos

SELECT DIRECTOR_NAME
FROM DIRECTORS
WHERE YEAR(DIRECTOR_BIRTH_DATE) >= YEAR(CURRENT_DATE) - 40
AND DIRECTOR_DEAD_DATE IS NULL;


--12. Indica la edad media de los directores vivos

SELECT AVG(YEAR(CURRENT_DATE) - YEAR(DIRECTOR_BIRTH_DATE) - 
           CASE 
               WHEN MONTH(CURRENT_DATE) < MONTH(DIRECTOR_BIRTH_DATE)
               OR (MONTH(CURRENT_DATE) = MONTH(DIRECTOR_BIRTH_DATE) AND DAY(CURRENT_DATE) < DAY(DIRECTOR_BIRTH_DATE)) THEN 1
               ELSE 0
           END) AS EDAD_MEDIA
FROM DIRECTORS
WHERE DIRECTOR_DEAD_DATE IS NULL;


--13. Indica la edad media de los actores que han fallecido

SELECT AVG(YEAR(DIRECTOR_DEAD_DATE) - YEAR(DIRECTOR_BIRTH_DATE) - 
           CASE 
               WHEN MONTH(DIRECTOR_DEAD_DATE) < MONTH(DIRECTOR_BIRTH_DATE)
               OR (MONTH(DIRECTOR_DEAD_DATE) = MONTH(DIRECTOR_BIRTH_DATE) AND DAY(DIRECTOR_DEAD_DATE) < DAY(DIRECTOR_BIRTH_DATE)) THEN 1
               ELSE 0
           END) AS EDAD_MEDIA
FROM DIRECTORS
WHERE DIRECTOR_DEAD_DATE IS NOT NULL;




DIFICULTAD: Media


--14. Devuelve el nombre de todas las películas y el nombre del estudio que las ha realizado

SELECT M.MOVIE_NAME, S.STUDIO_NAME
FROM MOVIES M
INNER JOIN STUDIOS S ON M.STUDIO_ID = S.STUDIO_ID;


--15. Devuelve los miembros que alquilaron al menos una película entre el año 2010 y el 2015

SELECT DISTINCT M.MEMBER_NAME
FROM MEMBERS M
INNER JOIN MEMBERS_MOVIE_RENTAL MR ON M.MEMBER_ID = MR.MEMBER_ID
WHERE YEAR(MR.MEMBER_RENTAL_DATE) BETWEEN 2010 AND 2015;


--16. Devuelve cuantas películas hay de cada país

SELECT N.NATIONALITY_NAME, COUNT(*) AS NUM_PELICULAS
FROM MOVIES M
INNER JOIN NATIONALITIES N ON M.NATIONALITY_ID = N.NATIONALITY_ID
GROUP BY N.NATIONALITY_NAME;


--17. Devuelve todas las películas que hay de género documental

SELECT M.MOVIE_NAME
FROM MOVIES M
INNER JOIN GENRES G ON M.GENRE_ID = G.GENRE_ID
WHERE G.GENRE_NAME = 'Documentary';


--18. Devuelve todas las películas creadas por directores nacidos a partir de 1980 y que todavía están vivos

SELECT M.MOVIE_NAME
FROM MOVIES AS M
INNER JOIN DIRECTORS D ON M.DIRECTOR_ID = D.DIRECTOR_ID
WHERE YEAR(D.DIRECTOR_BIRTH_DATE) >= 1980
AND D.DIRECTOR_DEAD_DATE IS NULL;


--19. Indica si hay alguna coincidencia de nacimiento de ciudad (y si las hay, indicarlas) entre los miembros del videoclub y los directores.

SELECT DISTINCT M.MEMBER_NAME
FROM MEMBERS AS M
INNER JOIN DIRECTORS D ON M.MEMBER_TOWN = D.DIRECTOR_BIRTH_PLACE;


--20. Devuelve el nombre y el año de todas las películas que han sido producidas por un estudio que actualmente no esté activo

SELECT M.MOVIE_NAME, YEAR(M.MOVIE_LAUNCH_DATE) AS MOVIE_YEAR
FROM MOVIES AS M
INNER JOIN STUDIOS S ON M.STUDIO_ID = S.STUDIO_ID
WHERE S.STUDIO_ACTIVE = 0;


--21. Devuelve una lista de las últimas 10 películas que se han alquilado

SELECT M.MOVIE_NAME, MR.MEMBER_RENTAL_DATE
FROM MOVIES M
INNER JOIN MEMBERS_MOVIE_RENTAL MR ON M.MOVIE_ID = MR.MOVIE_ID
ORDER BY MR.MEMBER_RENTAL_DATE DESC
LIMIT 10;


--22. Indica cuántas películas ha realizado cada director antes de cumplir 41 años

SELECT D.DIRECTOR_NAME, 
       YEAR(CURRENT_DATE) - YEAR(D.DIRECTOR_BIRTH_DATE) - 
       CASE 
           WHEN MONTH(CURRENT_DATE) < MONTH(D.DIRECTOR_BIRTH_DATE)
           OR (MONTH(CURRENT_DATE) = MONTH(D.DIRECTOR_BIRTH_DATE) AND DAY(CURRENT_DATE) < DAY(D.DIRECTOR_BIRTH_DATE)) THEN 1
           ELSE 0
       END AS DIRECTOR_AGE,
       COUNT(M.MOVIE_ID) AS NUM_PELICULAS
FROM DIRECTORS D
LEFT JOIN MOVIES M ON D.DIRECTOR_ID = M.DIRECTOR_ID
GROUP BY D.DIRECTOR_NAME, DIRECTOR_AGE
HAVING (YEAR(CURRENT_DATE) - YEAR(D.DIRECTOR_BIRTH_DATE) - 
       CASE 
           WHEN MONTH(CURRENT_DATE) < MONTH(D.DIRECTOR_BIRTH_DATE)
           OR (MONTH(CURRENT_DATE) = MONTH(D.DIRECTOR_BIRTH_DATE) AND DAY(CURRENT_DATE) < DAY(D.DIRECTOR_BIRTH_DATE)) THEN 1
           ELSE 0
       END) < 41;
	   
	   
--23. Indica cuál es la media de duración de las películas de cada director

SELECT D.DIRECTOR_NAME, AVG(M.MOVIE_DURATION) AS DURACION_MEDIA
FROM DIRECTORS D
LEFT JOIN MOVIES M ON D.DIRECTOR_ID = M.DIRECTOR_ID
GROUP BY D.DIRECTOR_NAME;


--24. Indica cuál es el nombre y la duración mínima de las películas que han sido alquiladas en los últimos 2 años por los miembros del videoclub (La "fecha de ejecución" en este script es el 25-01-2019)
--pegar nueva version

SELECT M.MOVIE_NAME, MIN(M.MOVIE_DURATION) AS DURACION_MINIMA
FROM MOVIES M
INNER JOIN MEMBERS_MOVIE_RENTAL MR ON M.MOVIE_ID = MR.MOVIE_ID
INNER JOIN MEMBERS MB ON MR.MEMBER_ID = MB.MEMBER_ID
WHERE MR.MEMBER_RENTAL_DATE >= DATE_SUB('2019-01-25', INTERVAL 2 YEAR)
GROUP BY M.MOVIE_NAME;


--25. Indica el número de películas que hayan hecho los directores durante las décadas de los 60, 70 y 80 que contengan la palabra "The" en cualquier parte del título

SELECT COUNT(*) AS NUMERO_PELICULAS
FROM MOVIES M
INNER JOIN DIRECTORS D ON M.DIRECTOR_ID = D.DIRECTOR_ID
WHERE (YEAR(M.MOVIE_LAUNCH_DATE) BETWEEN 1960 AND 1989)
AND M.MOVIE_NAME LIKE '%The%';




DIFICULTAD: Difícil


--26. Lista nombre, nacionalidad y director de todas las películas

SELECT 
    M.MOVIE_NAME,
    N.NATIONALITY_NAME AS NATIONALITY,
    D.DIRECTOR_NAME
FROM 
    MOVIES M
JOIN 
    DIRECTORS D ON M.DIRECTOR_ID = D.DIRECTOR_ID
JOIN 
    NATIONALITIES N ON M.NATIONALITY_ID = N.NATIONALITY_ID;
	
	
--27. Muestra las películas con los actores que han participado en cada una de ellas

SELECT 
    M.MOVIE_NAME AS PELICULA,
    A.ACTOR_NAME AS ACTOR
FROM 
    MOVIES M
JOIN 
    MOVIES_ACTORS MA ON M.MOVIE_ID = MA.MOVIE_ID
JOIN 
    ACTORS A ON MA.ACTOR_ID = A.ACTOR_ID
ORDER BY 
    PELICULA, ACTOR;
	

--28. Indica cual es el nombre del director del que más películas se han alquilado

SELECT D.DIRECTOR_NAME, COUNT(*) AS NUMERO_PELICULAS_ALQUILADAS
FROM DIRECTORS D
JOIN MOVIES M ON D.DIRECTOR_ID = M.DIRECTOR_ID
JOIN MEMBERS_MOVIE_RENTAL MR ON M.MOVIE_ID = MR.MOVIE_ID
GROUP BY D.DIRECTOR_NAME
ORDER BY NUMERO_PELICULAS_ALQUILADAS DESC
LIMIT 1;


--29. Indica cuantos premios han ganado cada uno de los estudios con las películas que han creado

SELECT S.STUDIO_NAME, COUNT(A.AWARD_WIN) AS PREMIOS_GANADOS
FROM STUDIOS S
LEFT JOIN MOVIES M ON S.STUDIO_ID = M.STUDIO_ID
LEFT JOIN AWARDS A ON M.MOVIE_ID = A.MOVIE_ID
GROUP BY S.STUDIO_NAME;


--30. Indica el número de premios a los que estuvo nominado un actor, pero que no ha conseguido (Si una película está nominada a un premio, su actor también lo está)

SELECT 
    A.ACTOR_NAME,
    COUNT(*) AS NUMERO_NOMINACIONES_SIN_GANAR
FROM 
    ACTORS A
JOIN 
    MOVIES_ACTORS MA ON A.ACTOR_ID = MA.ACTOR_ID
JOIN 
    MOVIES M ON MA.MOVIE_ID = M.MOVIE_ID
JOIN 
    AWARDS AW ON M.MOVIE_ID = AW.MOVIE_ID
WHERE 
    AW.AWARD_NOMINATION = 1
    AND AW.AWARD_WIN = 0
GROUP BY 
    A.ACTOR_NAME;
	
	
--31. Indica cuantos actores y directores hicieron películas para los estudios no activos

SELECT COUNT(DISTINCT ACTOR_ID) AS NUM_ACTORS, COUNT(DISTINCT DIRECTOR_ID) AS NUM_DIRECTORS
FROM ACTORS
JOIN MOVIES_ACTORS ON ACTORS.ACTOR_ID = MOVIES_ACTORS.ACTOR_ID
JOIN MOVIES ON MOVIES_ACTORS.MOVIE_ID = MOVIES.MOVIE_ID
JOIN DIRECTORS ON MOVIES.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID
JOIN STUDIOS ON MOVIES.STUDIO_ID = STUDIOS.STUDIO_ID
WHERE STUDIOS.STUDIO_ACTIVE = 0;


--32. Indica el nombre, ciudad, y teléfono de todos los miembros del videoclub que hayan alquilado películas que hayan sido nominadas a más de 150 premios y ganaran menos de 50

SELECT
    DISTINCT  M.MEMBER_NAME,
    M.MEMBER_TOWN AS CIUDAD,
    M.MEMBER_PHONE AS TELEFONO
FROM
    MEMBERS M
JOIN
    MEMBERS_MOVIE_RENTAL MR ON M.MEMBER_ID = MR.MEMBER_ID
JOIN
    MOVIES MO ON MR.MOVIE_ID = MO.MOVIE_ID
JOIN
    AWARDS A ON MO.MOVIE_ID = A.MOVIE_ID
WHERE
    A.AWARD_NOMINATION > 150
    AND A.AWARD_WIN < 50;
	
	
	
--33. Comprueba si hay errores en la BD entre las películas y directores (un director fallecido en el 76 no puede dirigir una película en el 88)

SELECT M.MOVIE_NAME, D.DIRECTOR_NAME, D.DIRECTOR_BIRTH_DATE, D.DIRECTOR_DEAD_DATE, M.MOVIE_LAUNCH_DATE
FROM MOVIES M
JOIN DIRECTORS D ON M.DIRECTOR_ID = D.DIRECTOR_ID
WHERE M.MOVIE_LAUNCH_DATE < D.DIRECTOR_DEAD_DATE;


--34. Utilizando la información de la sentencia anterior, modifica la fecha de defunción a un año más tarde del estreno de la película (mediante sentencia SQL)
--no probado 

UPDATE DIRECTORS D
JOIN MOVIES M ON D.DIRECTOR_ID = M.DIRECTOR_ID
SET D.DIRECTOR_DEAD_DATE = DATE_ADD(M.MOVIE_LAUNCH_DATE, INTERVAL 1 YEAR)
WHERE M.MOVIE_LAUNCH_DATE < D.DIRECTOR_DEAD_DATE;

--Probado en la BD del navegador: https://www.campusdual.com/contents/bootcamps/sql/

UPDATE DIRECTORS
SET DIRECTOR_DEAD_DATE = DATE(DIRECTOR_DEAD_DATE, '+1 year')
WHERE DIRECTOR_ID IN (SELECT D.DIRECTOR_ID
                      FROM DIRECTORS D
                      JOIN MOVIES M ON D.DIRECTOR_ID = M.DIRECTOR_ID
                      WHERE M.MOVIE_LAUNCH_DATE < D.DIRECTOR_DEAD_DATE);

--Correccion del ejercicio:

UPDATE

    DIRECTORS

SET

    DIRECTOR_DEAD_DATE =(

    SELECT

        MAX(DATEADD(YEAR, 1, M.MOVIE_LAUNCH_DATE)) AS POST_MOVIE_LAUNCH_DATE

    FROM

        MOVIES M

    INNER JOIN DIRECTORS D ON

        M.DIRECTOR_ID = D.DIRECTOR_ID

    WHERE

        D.DIRECTOR_DEAD_DATE IS NOT NULL

        AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE

        AND D.DIRECTOR_ID = DIRECTORS.DIRECTOR_ID

    GROUP BY

        DIRECTOR_NAME,

        DIRECTOR_DEAD_DATE)

WHERE

    DIRECTOR_ID IN (

    SELECT

        DISTINCT D.DIRECTOR_ID

    FROM

        MOVIES M

    INNER JOIN DIRECTORS D ON

        M.DIRECTOR_ID = D.DIRECTOR_ID

    WHERE

        D.DIRECTOR_DEAD_DATE IS NOT NULL

        AND D.DIRECTOR_DEAD_DATE < M.MOVIE_LAUNCH_DATE )


--Lo mismo, pero utilizando MERGE:

MERGE

INTO

    PUBLIC.DIRECTORS D

        USING (

    SELECT

        DIRECTOR_ID,

        DATEADD(YEAR,

        1,

        MAX(M.MOVIE_LAUNCH_DATE)) AS DIRECTOR_DEAD_DATE

    FROM

        PUBLIC.DIRECTORS D

    INNER JOIN PUBLIC.MOVIES M ON

        D.DIRECTOR_ID = M.DIRECTOR_ID

    WHERE

        D.DIRECTOR_DEAD_DATE IS NOT NULL

        AND M.MOVIE_LAUNCH_DATE > D.DIRECTOR_DEAD_DATE

    GROUP BY

        D.DIRECTOR_ID

        

        ) TOT(DIRECTOR_ID,

    DIRECTOR_DEAD_DATE) ON

    D.DIRECTOR_ID = TOT.DIRECTOR_ID

    WHEN MATCHED THEN

UPDATE

SET

    D.DIRECTOR_DEAD_DATE = TOT.DIRECTOR_DEAD_DATE
	
	



DIFICULTAD: Berserk mode (enunciados simples, mucha diversión...)


--35. Indica cuál es el género favorito de cada uno de los directores cuando dirigen una película

--Los directores que tienen el mismo numero de peliculas de varios generos se repiten

SELECT DISTINCT
    D.DIRECTOR_NAME AS Director,
    G.GENRE_NAME AS Genero,
    COUNT(M.MOVIE_ID) AS CantidadDePeliculas
FROM
    DIRECTORS D
JOIN
    MOVIES M ON D.DIRECTOR_ID = M.DIRECTOR_ID
JOIN
    GENRES G ON M.GENRE_ID = G.GENRE_ID
GROUP BY
    D.DIRECTOR_NAME, G.GENRE_NAME
HAVING
    COUNT(M.MOVIE_ID) = (
        SELECT
            MAX(MovieCount)
        FROM
            (SELECT
                D.DIRECTOR_NAME,
                G.GENRE_NAME,
                COUNT(M.MOVIE_ID) AS MovieCount
            FROM
                DIRECTORS D
            JOIN
                MOVIES M ON D.DIRECTOR_ID = M.DIRECTOR_ID
            JOIN
                GENRES G ON M.GENRE_ID = G.GENRE_ID
            GROUP BY
                D.DIRECTOR_NAME, G.GENRE_NAME) AS DirectorMovieCounts
        WHERE
            DirectorMovieCounts.DIRECTOR_NAME = D.DIRECTOR_NAME
    )
ORDER BY
    D.DIRECTOR_NAME;


--Parte que se ha hecho durante la reunion:

SELECT

    GROUPID.DIRECTOR_NAME,

    GROUP_CONCAT(GROUPID.GENRE_NAME) AS GENRE_NAME

FROM

    (

    SELECT

        COUNT(G.GENRE_NAME) AS NUM_MOVIES,

        D.DIRECTOR_ID,

        D.DIRECTOR_NAME,

        G.GENRE_ID,

        G.GENRE_NAME

    FROM

        MOVIES M

    INNER JOIN GENRES AS G ON

        M.GENRE_ID = G.GENRE_ID

    INNER JOIN DIRECTORS D ON

        M.DIRECTOR_ID = D.DIRECTOR_ID

    GROUP BY

        G.GENRE_ID,

        D.DIRECTOR_ID

    ORDER BY

        D.DIRECTOR_ID) GROUPID

INNER JOIN (

    SELECT

        DIRECTOR_ID,

        MAX(NUM_MOVIES) NUM_MOVIES

    FROM

        (

        SELECT

            COUNT(G.GENRE_NAME) AS NUM_MOVIES,

            D.DIRECTOR_ID,

            D.DIRECTOR_NAME,

            G.GENRE_ID,

            G.GENRE_NAME

        FROM

            MOVIES M

        INNER JOIN GENRES AS G ON

            M.GENRE_ID = G.GENRE_ID

        INNER JOIN DIRECTORS D ON

            M.DIRECTOR_ID = D.DIRECTOR_ID

        GROUP BY

            G.GENRE_ID,

            D.DIRECTOR_ID

        ORDER BY

            D.DIRECTOR_ID)

    GROUP BY

        DIRECTOR_ID) MAXVAL ON

    GROUPID.DIRECTOR_ID = MAXVAL.DIRECTOR_ID

    AND GROUPID.NUM_MOVIES = MAXVAL.NUM_MOVIES

GROUP BY

    GROUPID.DIRECTOR_NAME




--36. Indica cuál es la nacionalidad favorita de cada uno de los estudios en la producción de las películas

--37. Indica cuál fue la primera película que alquilaron los miembros del videoclub cuyos teléfonos tengan como último dígito el ID de alguna nacionalidad

SELECT
    MOVIERENTALS.MOVIE_NAME,
    MOVIERENTALS.MEMBER_NAME
FROM
    (
    SELECT
        MO.MOVIE_NAME,
        MMR.MOVIE_ID,
        MMR.MEMBER_ID,
        MMR.MEMBER_RENTAL_DATE,
        M.MEMBER_NAME,
        TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
    FROM
        MOVIES MO
    INNER JOIN
    MEMBERS_MOVIE_RENTAL MMR
    ON
        MO.MOVIE_ID = MMR.MOVIE_ID
    INNER JOIN MEMBERS M ON
        MMR.MEMBER_ID = M.MEMBER_ID
    WHERE
        TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
        SELECT
            NATIONALITY_ID
        FROM
            NATIONALITIES

 

)
    GROUP BY
        MO.MOVIE_NAME,
        MMR.MOVIE_ID,
        MMR.MEMBER_ID,
        MMR.MEMBER_RENTAL_DATE,
        M.MEMBER_NAME,
        LAST_DIGIT
    ORDER BY
        M.MEMBER_NAME

 

) MOVIERENTALS
INNER JOIN

    (
    SELECT
        MEMBER_ID,
        MIN(MEMBER_RENTAL_DATE) AS "FIRST_RENTAL"
    FROM
        (
        SELECT
            MO.MOVIE_NAME,
            MMR.MOVIE_ID,
            MMR.MEMBER_ID,
            MMR.MEMBER_RENTAL_DATE,
            M.MEMBER_NAME,
            TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) AS "LAST_DIGIT"
        FROM
            MOVIES MO
        INNER JOIN
    MEMBERS_MOVIE_RENTAL MMR
    ON
            MO.MOVIE_ID = MMR.MOVIE_ID
        INNER JOIN MEMBERS M ON
            MMR.MEMBER_ID = M.MEMBER_ID
        WHERE
            TO_NUMBER(SUBSTRING(M.MEMBER_PHONE FROM LENGTH(MEMBER_PHONE))) IN (
            SELECT
                NATIONALITY_ID
            FROM
                NATIONALITIES

 

)
        GROUP BY
            MO.MOVIE_NAME,
            MMR.MOVIE_ID,
            MMR.MEMBER_ID,
            MMR.MEMBER_RENTAL_DATE,
            M.MEMBER_NAME,
            LAST_DIGIT
        ORDER BY
            M.MEMBER_NAME
    )
    GROUP BY
        MEMBER_ID) FIRSTRENTALS ON
    MOVIERENTALS.MEMBER_ID = FIRSTRENTALS.MEMBER_ID AND MOVIERENTALS.MEMBER_RENTAL_DATE = FIRSTRENTALS.FIRST_RENTAL
GROUP BY
    MOVIERENTALS.MOVIE_NAME,
    MOVIERENTALS.MEMBER_NAME





